name: "Publish design system release"

on:
  push:
    branches:
      - release
  workflow_dispatch:
    inputs:
      pr_numbers:
        description: "Comma-separated list of PR numbers to include"
        required: true
        type: string

concurrency:
  group: tag-release
  cancel-in-progress: false

jobs:
  publish-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version tag
        id: get_latest_tag
        run: |
          tag=$(git tag --sort=-creatordate | grep -E '^\d+\.\d+\.\d+$' | tail -n 1)
          echo "latest=$tag" >> $GITHUB_OUTPUT

      - name: Get PR numbers since last tag (push only)
        id: commit_prs
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latest = '${{ steps.get_latest_tag.outputs.latest }}';
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 100
            });

            const prNumbers = new Set();

            for (const commit of commits.data) {
              const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commit.sha
              });

              prs.forEach(pr => {
                if (pr.merged_at) {
                  prNumbers.add(pr.number);
                }
              });
            }

            const output = Array.from(prNumbers).join(',');
            core.setOutput('prs', output);
            console.log(`üîç PRs found: ${output}`);

      - name: Use PRs from manual input (manual only)
        id: manual_prs
        if: github.event_name == 'workflow_dispatch'
        run: |
          prs="${{ github.event.inputs.pr_numbers }}"
          echo "prs=$prs" >> $GITHUB_OUTPUT

      - name: Determine release bump type
        id: bump_type
        uses: actions/github-script@v7
        env:
          COMMIT_PRS: ${{ steps.commit_prs.outputs.prs }}
          MANUAL_PRS: ${{ steps.manual_prs.outputs.prs }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const event = context.eventName;
            const input = event === 'push' ? process.env.COMMIT_PRS : process.env.MANUAL_PRS;
            const prNumbers = (input || '').split(',').filter(Boolean);
            const priorities = { 'release: major': 3, 'release: minor': 2, 'release: patch': 1 };
            let maxPriority = 0;

            for (const prNumber of prNumbers) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: Number(prNumber)
              });
              for (const label of pr.labels) {
                const p = priorities[label.name];
                if (p && p > maxPriority) maxPriority = p;
              }
            }

            const bumpMap = { 3: 'major', 2: 'minor', 1: 'patch' };
            const bump = bumpMap[maxPriority] || null;

            if (!bump) {
              core.setFailed('‚ùå No release label found on any of the PRs.');
            } else {
              core.setOutput('type', bump);
              core.setOutput('prs', prNumbers.join(','));
              console.log(`üì¶ Release bump type: ${bump}`);
            }

      - name: Bump version
        id: bump
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.get_latest_tag.outputs.latest || '0.0.0' }}"
          bump="${{ steps.bump_type.outputs.type }}"

          if [[ "$bump" == "major" ]]; then
            major=$((major + 1)); minor=0; patch=0
          elif [[ "$bump" == "minor" ]]; then
            minor=$((minor + 1)); patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "üî¢ New version: $new_version"

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.bump.outputs.version }}
          git push origin ${{ steps.bump.outputs.version }}

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumbers = '${{ steps.bump_type.outputs.prs }}'.split(',').filter(Boolean);
            const changes = [];

            for (const prNumber of prNumbers) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: Number(prNumber)
              });
              changes.push(`- ${pr.title} ([#${pr.number}](${pr.html_url})) by @${pr.user.login}`);
            }

            const changelog = changes.length ? changes.join('\n') : 'No merged PRs found.';
            core.setOutput("log", changelog);

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.bump.outputs.version }}',
              name: 'Release ${{ steps.bump.outputs.version }}',
              body: `### üì¶ Changes\n\n${{ steps.changelog.outputs.log }}`,
              draft: false,
              prerelease: false
            });
